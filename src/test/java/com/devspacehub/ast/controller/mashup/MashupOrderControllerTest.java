/* © 2024 devspacehub, Inc. All rights reserved. name : MashupOrderControllerTest creation : 2024.2.11 author : Yoonji Moon */package com.devspacehub.ast.controller.mashup;import com.devspacehub.ast.domain.mashup.service.MashupService;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.data.jpa.mapping.JpaMetamodelMappingContext;import org.springframework.test.web.servlet.MockMvc;import static org.mockito.Mockito.verify;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;@WebMvcTest(MashupOrderController.class)@MockBean(JpaMetamodelMappingContext.class)class MashupOrderControllerTest {    @Autowired    MockMvc mockMvc;    @MockBean    MashupService mashupService;    @Test    @DisplayName("거래량 순위 10위 중 조건에 부합하는 종목에 대해 매수 주문한다.")    void buyOrder() throws Exception {        mockMvc.perform(                post("/ast/orders/buy")        ).andExpect(status().isOk())                .andExpect(jsonPath("$.success").exists())                .andExpect(jsonPath("$.time").exists())                .andExpect(jsonPath("$.code").exists())                .andDo(print());        verify(mashupService).startBuyOrder();    }    @Test    @DisplayName("보유한 종목 중 조건에 통과하는 종목에 대해 매도 주문한다.")    void sellOrder() throws Exception {        mockMvc.perform(                        post("/ast/orders/sell")                ).andExpect(status().isOk())                .andExpect(jsonPath("$.success").exists())                .andExpect(jsonPath("$.time").exists())                .andExpect(jsonPath("$.code").exists())                .andDo(print());        verify(mashupService).startSellOrder();    }    @Test    @DisplayName("예약 매수 종목 중 조건에 부합하는 종목에 대해 매수 주문한다.")    void reservationBuyOrder() throws Exception {        mockMvc.perform(                        post("/ast/orders/reserve/buy")                ).andExpect(status().isOk())                .andExpect(jsonPath("$.success").exists())                .andExpect(jsonPath("$.time").exists())                .andExpect(jsonPath("$.code").exists())                .andDo(print());        verify(mashupService).startReservationBuyOrder();    }}